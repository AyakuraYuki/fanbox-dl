// Code generated by MockGen. DO NOT EDIT.
// Source: api.go

// Package fanbox is a generated GoMock package.
package fanbox

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPI is a mock of API interface.
type MockAPI struct {
	ctrl     *gomock.Controller
	recorder *MockAPIMockRecorder
}

// MockAPIMockRecorder is the mock recorder for MockAPI.
type MockAPIMockRecorder struct {
	mock *MockAPI
}

// NewMockAPI creates a new mock instance.
func NewMockAPI(ctrl *gomock.Controller) *MockAPI {
	mock := &MockAPI{ctrl: ctrl}
	mock.recorder = &MockAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPI) EXPECT() *MockAPIMockRecorder {
	return m.recorder
}

// ListCreator mocks base method.
func (m *MockAPI) ListCreator(ctx context.Context, url string) (*ListCreator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCreator", ctx, url)
	ret0, _ := ret[0].(*ListCreator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCreator indicates an expected call of ListCreator.
func (mr *MockAPIMockRecorder) ListCreator(ctx, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCreator", reflect.TypeOf((*MockAPI)(nil).ListCreator), ctx, url)
}

// ListPlans mocks base method.
func (m *MockAPI) ListPlans(ctx context.Context) (*PlanListSupporting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListPlans", ctx)
	ret0, _ := ret[0].(*PlanListSupporting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListPlans indicates an expected call of ListPlans.
func (mr *MockAPIMockRecorder) ListPlans(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListPlans", reflect.TypeOf((*MockAPI)(nil).ListPlans), ctx)
}

// Request mocks base method.
func (m *MockAPI) Request(ctx context.Context, method, url string) (*http.Response, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Request", ctx, method, url)
	ret0, _ := ret[0].(*http.Response)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Request indicates an expected call of Request.
func (mr *MockAPIMockRecorder) Request(ctx, method, url interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Request", reflect.TypeOf((*MockAPI)(nil).Request), ctx, method, url)
}
